#!/usr/bin/env python
# -*- Python -*-

import sys
import time
sys.path.append(".")

# Import RTM module
import OpenRTM
import RTC

# Import Service implementation class
# <rtc-template block="service_impl">
#foreach($providerIdlFile in ${rtcParam.providerIdlPathes})
from ${tmpltHelper.getFilenameNoExt(${providerIdlFile})}_idl_example import *
#end

# </rtc-template>

# Import Service stub modules
# <rtc-template block="consumer_import">
#if(${rtcParam.originalConsumerIdls.size()}>0)
import _GlobalIDL, _GlobalIDL__POA

#end
# </rtc-template>


# This module's spesification
# <rtc-template block="module_spec">
${rtcParam.name}_spec = ["implementation_id", "${rtcParam.name}", 
		 "type_name",         "${rtcParam.name}", 
		 "description",       "${rtcParam.description}", 
		 "version",           "${rtcParam.version}", 
		 "vendor",            "${rtcParam.vender}", 
		 "category",          "${rtcParam.category}", 
		 "activity_type",     "${rtcParam.componentType}", 
		 "max_instance",      "${rtcParam.maxInstance}", 
		 "language",          "Python", 
		 "lang_type",         "SCRIPT",
#foreach($configParam in ${rtcParam.configParams})
		 "conf.default.${configParam.name}", "${configParam.defaultVal}",
#end
		 ""]
# </rtc-template>

class ${rtcParam.name}(OpenRTM.DataFlowComponentBase):
	def __init__(self, manager):
		OpenRTM.DataFlowComponentBase.__init__(self, manager)

#foreach($port in ${rtcParam.inports})
		self._d_${port.name} = RTC.${port.type}(RTC.Time(0,0),${pyConv.convPortInit(${port.type})})
		self._${port.name}In = OpenRTM.InPort("${port.name}", self._d_${port.name}, OpenRTM.RingBuffer(8))
#end
#foreach($port in ${rtcParam.outports})
		self._d_${port.name} = RTC.${port.type}(RTC.Time(0,0),${pyConv.convPortInit(${port.type})})
		self._${port.name}Out = OpenRTM.OutPort("${port.name}", self._d_${port.name}, OpenRTM.RingBuffer(8))
#end
		

		# Set InPort buffers
#foreach($port in ${rtcParam.inports})
		self.registerInPort("${port.name}",self._${port.name}In)
#end
		
		# Set OutPort buffers
#foreach($port in ${rtcParam.outports})
		self.registerOutPort("${port.name}",self._${port.name}Out)
#end
		

#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
		self._${serviceReferenceParam.interfaceName}Port = OpenRTM.CorbaPort("${serviceReferenceParam.interfaceName}")
#end
#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
		self._${serviceReferenceParam.interfaceName}Port = OpenRTM.CorbaPort("${serviceReferenceParam.interfaceName}")
#end
		

#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
		self._${serviceReferenceParam.name} = ${serviceReferenceParam.type}_i()
#end
		

#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
		self._${serviceReferenceParam.name} = OpenRTM.CorbaConsumer(interfaceType=_GlobalIDL.${serviceReferenceParam.type})
#end
		
		# Set service provider to Ports
#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
		self._${serviceReferenceParam.interfaceName}Port.registerProvider("${serviceReferenceParam.name}", "${serviceReferenceParam.type}", self._${serviceReferenceParam.name})
#end
		
		# Set service consumers to Ports
#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
		self._${serviceReferenceParam.interfaceName}Port.registerConsumer("${serviceReferenceParam.name}", "${serviceReferenceParam.type}", self._${serviceReferenceParam.name})
#end
		
		# Set CORBA Service Ports
#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
		self.registerPort(self._${serviceReferenceParam.interfaceName}Port)
#end
#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
		self.registerPort(self._${serviceReferenceParam.interfaceName}Port)
#end
		

		# initialize of configuration-data.
		# <rtc-template block="init_conf_param">
#foreach($configParam in ${rtcParam.configParams})
		self._${configParam.name} = [${pyConv.convDefaultVal(${configParam})}]
#end
		
		# </rtc-template>


		 
	def onInitialize(self):
		# Bind variables and configuration variable
#foreach($configParam in ${rtcParam.configParams})
		self.bindParameter("${configParam.name}", self._${configParam.name}, "${configParam.defaultVal}")
#end
		
		return RTC.RTC_OK


	
	#def onFinalize(self, ec_id):
	#
	#	return RTC.RTC_OK
	
	#def onStartup(self, ec_id):
	#
	#	return RTC.RTC_OK
	
	#def onShutdown(self, ec_id):
	#
	#	return RTC.RTC_OK
	
	#def onActivated(self, ec_id):
	#
	#	return RTC.RTC_OK
	
	#def onDeactivated(self, ec_id):
	#
	#	return RTC.RTC_OK
	
	#def onExecute(self, ec_id):
	#
	#	return RTC.RTC_OK
	
	#def onAborting(self, ec_id):
	#
	#	return RTC.RTC_OK
	
	#def onError(self, ec_id):
	#
	#	return RTC.RTC_OK
	
	#def onReset(self, ec_id):
	#
	#	return RTC.RTC_OK
	
	#def onStateUpdate(self, ec_id):
	#
	#	return RTC.RTC_OK
	
	#def onRateChanged(self, ec_id):
	#
	#	return RTC.RTC_OK
	



def MyModuleInit(manager):
    profile = OpenRTM.Properties(defaults_str=${rtcParam.name}_spec)
    manager.registerFactory(profile,
                            ${rtcParam.name},
                            OpenRTM.Delete)

    # Create a component
    comp = manager.createComponent("${rtcParam.name}")



def main():
	mgr = OpenRTM.Manager.init(len(sys.argv), sys.argv)
	mgr.setModuleInitProc(MyModuleInit)
	mgr.activateManager()
	mgr.runManager()

if __name__ == "__main__":
	main()

