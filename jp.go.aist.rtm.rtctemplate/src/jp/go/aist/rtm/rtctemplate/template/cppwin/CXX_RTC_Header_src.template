// -*- C++ -*-
/*!
 * @file  ${rtcParam.name}.h
 * @brief ${rtcParam.description}
 * @date  ${dol}Date${dol}
 *
 * ${dol}Id${dol}
 */

${sharp}ifndef ${rtcParam.name.toUpperCase()}_H
${sharp}define ${rtcParam.name.toUpperCase()}_H

${sharp}include <rtm/Manager.h>
${sharp}include <rtm/DataFlowComponentBase.h>
${sharp}include <rtm/CorbaPort.h>
${sharp}include <rtm/DataInPort.h>
${sharp}include <rtm/DataOutPort.h>
${sharp}include <rtm/idl/BasicDataTypeSkel.h>

// Service implementation headers
// <rtc-template block="service_impl_h">
#foreach($providerIdlFile in ${rtcParam.providerIdlPathes})
${sharp}include "${tmpltHelper.getFilenameNoExt(${providerIdlFile})}${rtcParam.parent.serviceImplSuffix}.h"
#end

// </rtc-template>

// Service Consumer stub headers
// <rtc-template block="consumer_stub_h">
#foreach($consumerIdlFile in ${rtcParam.consumerIdlPathes})
${sharp}include "${tmpltHelper.getFilenameNoExt(${consumerIdlFile})}${rtcParam.parent.serviceStubSuffix}.h"
#end

// </rtc-template>

using namespace RTC;

class ${rtcParam.name}
  : public RTC::DataFlowComponentBase
{
 public:
  ${rtcParam.name}(RTC::Manager* manager);
  ~${rtcParam.name}();

  // <rtc-template block="public_attribute">
#foreach($publicAttribute in ${rtcParam.publicAttributes})  
  ${publicAttribute};
#end
  
  // </rtc-template>

  // <rtc-template block="public_operation">
#foreach($publicOperation in ${rtcParam.publicOperations})  
  ${publicOperation};
#end
  
  // </rtc-template>

  // The initialize action (on CREATED->ALIVE transition)
  // formaer rtc_init_entry() 
  #if(${rtcParam.configParams.size()}==0)//#end virtual RTC::ReturnCode_t onInitialize();

  // The finalize action (on ALIVE->END transition)
  // formaer rtc_exiting_entry()
  // virtual RTC::ReturnCode_t onFinalize();

  // The startup action when ExecutionContext startup
  // former rtc_starting_entry()
  // virtual RTC::ReturnCode_t onStartup(RTC::UniqueId ec_id);

  // The shutdown action when ExecutionContext stop
  // former rtc_stopping_entry()
  // virtual RTC::ReturnCode_t onShutdown(RTC::UniqueId ec_id);

  // The activated action (Active state entry action)
  // former rtc_active_entry()
  // virtual RTC::ReturnCode_t onActivated(RTC::UniqueId ec_id);

  // The deactivated action (Active state exit action)
  // former rtc_active_exit()
  // virtual RTC::ReturnCode_t onDeactivated(RTC::UniqueId ec_id);

  // The execution action that is invoked periodically
  // former rtc_active_do()
  // virtual RTC::ReturnCode_t onExecute(RTC::UniqueId ec_id);

  // The aborting action when main logic error occurred.
  // former rtc_aborting_entry()
  // virtual RTC::ReturnCode_t onAborting(RTC::UniqueId ec_id);

  // The error action in ERROR state
  // former rtc_error_do()
  // virtual RTC::ReturnCode_t onError(RTC::UniqueId ec_id);

  // The reset action that is invoked resetting
  // This is same but different the former rtc_init_entry()
  // virtual RTC::ReturnCode_t onReset(RTC::UniqueId ec_id);
  
  // The state update action that is invoked after onExecute() action
  // no corresponding operation exists in OpenRTm-aist-0.2.0
  // virtual RTC::ReturnCode_t onStateUpdate(RTC::UniqueId ec_id);

  // The action that is invoked when execution context's rate is changed
  // no corresponding operation exists in OpenRTm-aist-0.2.0
  // virtual RTC::ReturnCode_t onRateChanged(RTC::UniqueId ec_id);


 protected:
  // <rtc-template block="protected_attribute">
#foreach($protectedAttribute in ${rtcParam.protectedAttributes})  
  ${protectedAttribute};
#end
  
  // </rtc-template>

  // <rtc-template block="protected_operation">
#foreach($protectedOperation in ${rtcParam.protectedOperations})  
  ${protectedOperation};
#end
  
  // </rtc-template>

#if( ${rtcParam.configParams.size()} > 0 )
  // Configuration variable declaration
  // <rtc-template block="config_declare">
#foreach($configParam in ${rtcParam.configParams})  
  ${configParam.type} m_${configParam.name};
#end
  // </rtc-template>

#end
  // DataInPort declaration
  // <rtc-template block="inport_declare">
#foreach($port in ${rtcParam.inports})  
  ${port.type} m_${port.name};
  InPort<${port.type}> m_${port.name}In;
#end
  
  // </rtc-template>


  // DataOutPort declaration
  // <rtc-template block="outport_declare">
#foreach($port in ${rtcParam.outports})  
  ${port.type} m_${port.name};
  OutPort<${port.type}> m_${port.name}Out;
#end
  
  // </rtc-template>

  // CORBA Port declaration
  // <rtc-template block="corbaport_declare">
#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
  RTC::CorbaPort m_${serviceReferenceParam.interfaceName}Port;
#end
#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
  RTC::CorbaPort m_${serviceReferenceParam.interfaceName}Port;
#end
  
  // </rtc-template>

  // Service declaration
  // <rtc-template block="service_declare">
#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
  ${serviceReferenceParam.type}${rtcParam.parent.serviceImplSuffix} m_${serviceReferenceParam.name};
#end
  
  // </rtc-template>

  // Consumer declaration
  // <rtc-template block="consumer_declare">
#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
  RTC::CorbaConsumer<${serviceReferenceParam.type}> m_${serviceReferenceParam.name};
#end
  
  // </rtc-template>

 private:
  int dummy;
  // <rtc-template block="private_attribute">
#foreach($privateAttribute in ${rtcParam.privateAttributes})  
  ${privateAttribute};
#end
  
  // </rtc-template>

  // <rtc-template block="private_operation">
#foreach($privateOperation in ${rtcParam.privateOperations})  
  ${privateOperation};
#end
  
  // </rtc-template>

};


extern "C"
{
  void ${rtcParam.name}Init(RTC::Manager* manager);
};

#endif // ${rtcParam.name.toUpperCase()}_H
