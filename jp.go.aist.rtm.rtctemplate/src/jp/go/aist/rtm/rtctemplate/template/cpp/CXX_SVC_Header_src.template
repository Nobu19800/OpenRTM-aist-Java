// -*-C++-*-
/*!
 * @file  ${cXXConv.getBasename(${idlFileParam.idlFileNoExt})}${idlFileParam.parent.serviceImplSuffix}.h
 * @brief Service implementation header of ${idlFileParam.idlFile}
 * @date ${dol}Date${dol}
 *
 * ${dol}Id${dol}
 */

${sharp}include "${idlFileParam.idlFileNoExt}${idlFileParam.parent.serviceSkelSuffix}.h"

#ifndef ${idlFileParam.idlFileNoExt.toUpperCase()}${idlFileParam.parent.serviceImplSuffix.toUpperCase()}_H
#define ${idlFileParam.idlFileNoExt.toUpperCase()}${idlFileParam.parent.serviceImplSuffix.toUpperCase()}_H
 
#foreach($serviceClassParam in ${idlFileParam.serviceClassParams})
/*
 * Example class implementing IDL interface ${cXXConv.convertDelimiter(${serviceClassParam.name})}
 */
class ${cXXConv.getBasename(${serviceClassParam.name})}${serviceClassParam.parent.serviceImplSuffix}
 : public virtual POA_${cXXConv.convertDelimiter(${serviceClassParam.name})},
   public virtual PortableServer::RefCountServantBase
{
 private:
   // Make sure all instances are built on the heap by making the
   // destructor non-public
   //virtual ~${cXXConv.getBasename(${serviceClassParam.name})}${serviceClassParam.parent.serviceImplSuffix}();

 public:
   // standard constructor
   ${cXXConv.getBasename(${serviceClassParam.name})}${serviceClassParam.parent.serviceImplSuffix}();
   virtual ~${cXXConv.getBasename(${serviceClassParam.name})}${serviceClassParam.parent.serviceImplSuffix}();

   // attributes and operations
#foreach($serviceMethodParam in ${serviceClassParam.methods})
   ${cXXConv.convCpp2CORBA(${serviceMethodParam.type})} ${serviceMethodParam.name}(#foreach($serviceArgumentParam in ${serviceMethodParam.arguments})#if($velocityCount > 1), #end${cXXConv.convCpp2CORBAforArg(${serviceArgumentParam.type},${serviceArgumentParam.direction})} ${serviceArgumentParam.name}#end);
#end

};

#end


#endif // ${idlFileParam.idlFileNoExt.toUpperCase()}${idlFileParam.parent.serviceImplSuffix.toUpperCase()}_H


