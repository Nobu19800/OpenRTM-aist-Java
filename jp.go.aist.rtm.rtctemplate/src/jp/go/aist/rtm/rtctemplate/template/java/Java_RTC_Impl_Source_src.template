// -*- Java -*-
/*!
 * @file  ${rtcParam.name}Impl.java
 * @brief ${rtcParam.description}
 * @date  $Date$
 *
 * $Id$
 */

#foreach($type in ${javaConv.getPortTypes(${rtcParam})})  
import RTC.${type};
#end
import jp.go.aist.rtm.RTC.DataFlowComponentBase;
import jp.go.aist.rtm.RTC.Manager;
#if( ${rtcParam.inports.size()} > 0 )
import jp.go.aist.rtm.RTC.port.InPort;
#end
#if( ${rtcParam.outports.size()} > 0 )
import jp.go.aist.rtm.RTC.port.OutPort;
#end
#if( ${rtcParam.inports.size()} > 0 || ${rtcParam.outports.size()} > 0 )
import jp.go.aist.rtm.RTC.util.DataRef;
#end
#if( ${rtcParam.originalConsumerIdls.size()} > 0 )
import jp.go.aist.rtm.RTC.port.CorbaConsumer;
#end
#if( ${rtcParam.originalProviderIdls.size()} > 0 || ${rtcParam.originalConsumerIdls.size()} > 0 )
import jp.go.aist.rtm.RTC.port.CorbaPort;
#end
#if( ${rtcParam.originalProviderIdls.size()} > 0 )
import org.omg.PortableServer.POAPackage.ObjectNotActive;
import org.omg.PortableServer.POAPackage.ServantAlreadyActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;
#end
#if( ${rtcParam.configParams.size()} > 0 )
#foreach($type in ${javaConv.getParamTypes(${rtcParam})})  
import jp.go.aist.rtm.RTC.util.${type};
#end
import RTC.ReturnCode_t;
#end

public class ${rtcParam.name}Impl extends DataFlowComponentBase {

	public ${rtcParam.name}Impl(Manager manager) {  
        super(manager);
        // <rtc-template block="initializer">
#foreach($port in ${rtcParam.inports})  
        m_${port.name}_val = new ${port.type}();
        m_${port.name} = new DataRef<${port.type}>(m_${port.name}_val);
        m_${port.name}In = new InPort<${port.type}>("${port.name}", m_${port.name});
#end
#foreach($port in ${rtcParam.outports})  
        m_${port.name}_val = new ${port.type}();
        m_${port.name} = new DataRef<${port.type}>(m_${port.name}_val);
        m_${port.name}Out = new OutPort<${port.type}>("${port.name}", m_${port.name});
#end
#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
        m_${serviceReferenceParam.interfaceName}Port = new CorbaPort("${serviceReferenceParam.interfaceName}");
#end
#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
        m_${serviceReferenceParam.interfaceName}Port = new CorbaPort("${serviceReferenceParam.interfaceName}");
#end
        // </rtc-template>

        // Registration: InPort/OutPort/Service
        // <rtc-template block="registration">
        // Set InPort buffers
#if( ${rtcParam.inports.size()} > 0 )
        try {
#foreach($port in ${rtcParam.inports})  
			registerInPort(${port.type}.class, "${port.name}", m_${port.name}In);
#end
		} catch (Exception e) {
			e.printStackTrace();
		}
#end
        
        // Set OutPort buffer
#if( ${rtcParam.outports.size()} > 0 )
        try {
#foreach($port in ${rtcParam.outports})  
			registerOutPort(${port.type}.class, "${port.name}", m_${port.name}Out);
#end
		} catch (Exception e) {
			e.printStackTrace();
		}
#end
        
        // Set service provider to Ports
#if( ${rtcParam.providerIdlPathes.size()} > 0 )
        try {
#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
        	m_${serviceReferenceParam.interfaceName}Port.registerProvider("${serviceReferenceParam.name}", "${serviceReferenceParam.type}", m_${serviceReferenceParam.name});
#end
        } catch (ServantAlreadyActive e) {
            e.printStackTrace();
        } catch (WrongPolicy e) {
            e.printStackTrace();
        } catch (ObjectNotActive e) {
            e.printStackTrace();
        }
#end
        
        // Set service consumers to Ports
#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
        m_${serviceReferenceParam.interfaceName}Port.registerConsumer("${serviceReferenceParam.name}", "${serviceReferenceParam.type}", m_${serviceReferenceParam.name}Base);
#end
        
        // Set CORBA Service Ports
#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
        registerPort(m_${serviceReferenceParam.interfaceName}Port);
#end
#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
        registerPort(m_${serviceReferenceParam.interfaceName}Port);
#end
        
        // </rtc-template>
    }

    // The initialize action (on CREATED->ALIVE transition)
    // formaer rtc_init_entry() 
#if( ${rtcParam.configParams.size()} > 0 )
    @Override
    protected ReturnCode_t onInitialize() {
#foreach($configParam in ${rtcParam.configParams})  
        bindParameter("${configParam.name}", m_${configParam.name}, "${configParam.defaultVal}");
#end
        return ReturnCode_t.RTC_OK;
    }
#else
//    @Override
//    protected ReturnCode_t onInitialize() {
//        return super.onInitialize();
//    }
#end
    // The finalize action (on ALIVE->END transition)
    // formaer rtc_exiting_entry()
//    @Override
//    protected ReturnCode_t onFinalize() {
//        return super.onFinalize();
//    }
    //
    // The startup action when ExecutionContext startup
    // former rtc_starting_entry()
//    @Override
//    protected ReturnCode_t onStartup(int ec_id) {
//        return super.onStartup(ec_id);
//    }
    //
    // The shutdown action when ExecutionContext stop
    // former rtc_stopping_entry()
//    @Override
//    protected ReturnCode_t onShutdown(int ec_id) {
//        return super.onShutdown(ec_id);
//    }
    //
    // The activated action (Active state entry action)
    // former rtc_active_entry()
//    @Override
//    protected ReturnCode_t onActivated(int ec_id) {
//        return super.onActivated(ec_id);
//    }
    //
    // The deactivated action (Active state exit action)
    // former rtc_active_exit()
//    @Override
//    protected ReturnCode_t onDeactivated(int ec_id) {
//        return super.onDeactivated(ec_id);
//    }
    //
    // The execution action that is invoked periodically
    // former rtc_active_do()
//    @Override
//    protected ReturnCode_t onExecute(int ec_id) {
//        return super.onExecute(ec_id);
//    }
    //
    // The aborting action when main logic error occurred.
    // former rtc_aborting_entry()
//  @Override
//  public ReturnCode_t onAborting(int ec_id) {
//      return super.onAborting(ec_id);
//  }
    //
    // The error action in ERROR state
    // former rtc_error_do()
//    @Override
//    public ReturnCode_t onError(int ec_id) {
//        return super.onError(ec_id);
//    }
    //
    // The reset action that is invoked resetting
    // This is same but different the former rtc_init_entry()
//    @Override
//    protected ReturnCode_t onReset(int ec_id) {
//        return super.onReset(ec_id);
//    }
    //
    // The state update action that is invoked after onExecute() action
    // no corresponding operation exists in OpenRTm-aist-0.2.0
//    @Override
//    protected ReturnCode_t onStateUpdate(int ec_id) {
//        return super.onStateUpdate(ec_id);
//    }
    //
    // The action that is invoked when execution context's rate is changed
    // no corresponding operation exists in OpenRTm-aist-0.2.0
//    @Override
//    protected ReturnCode_t onRateChanged(int ec_id) {
//        return super.onRateChanged(ec_id);
//    }
//
#if( ${rtcParam.configParams.size()} > 0 )
	// Configuration variable declaration
	// <rtc-template block="config_declare">
#foreach($configParam in ${rtcParam.configParams})  
    protected ${javaConv.convJava2ParamHolder(${configParam.type},true)} m_${configParam.name} = new ${javaConv.convJava2ParamHolder(${configParam.type},true)}();
#end
	// </rtc-template>

#end
    // DataInPort declaration
    // <rtc-template block="inport_declare">
#foreach($port in ${rtcParam.inports})  
    protected ${port.type} m_${port.name}_val;
    protected DataRef<${port.type}> m_${port.name};
    protected InPort<${port.type}> m_${port.name}In;
#end
    
    // </rtc-template>

    // DataOutPort declaration
    // <rtc-template block="outport_declare">
#foreach($port in ${rtcParam.outports})  
    protected ${port.type} m_${port.name}_val;
    protected DataRef<${port.type}> m_${port.name};
    protected OutPort<${port.type}> m_${port.name}Out;
#end
    
    // </rtc-template>

    // CORBA Port declaration
    // <rtc-template block="corbaport_declare">
#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
    protected CorbaPort m_${serviceReferenceParam.interfaceName}Port;
#end
#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
    protected CorbaPort m_${serviceReferenceParam.interfaceName}Port;
#end
    
    // </rtc-template>

    // Service declaration
    // <rtc-template block="service_declare">
#foreach($serviceReferenceParam in ${rtcParam.providerReferences})  
    protected ${serviceReferenceParam.type}${rtcParam.parent.serviceImplSuffix} m_${serviceReferenceParam.name} = new ${serviceReferenceParam.type}${rtcParam.parent.serviceImplSuffix}();
#end
    
    // </rtc-template>

    // Consumer declaration
    // <rtc-template block="consumer_declare">
#foreach($serviceReferenceParam in ${rtcParam.consumerReferences})  
    protected CorbaConsumer<${serviceReferenceParam.type}> m_${serviceReferenceParam.name}Base = new CorbaConsumer<${serviceReferenceParam.type}>(${serviceReferenceParam.type}.class);
    protected ${serviceReferenceParam.type} m_${serviceReferenceParam.name};
#end
    
    // </rtc-template>


}
